
/*Información de la tabla browse para los 10 primeros registros*/
SELECT * FROM browse LIMIT 10;

/*Consultar todos los registros de la tabla celebs*/
SELECT*FROM celebs;

/* Clausula CREATE para crear la tabla celebs con sus columnas y tipos de datos*/
CREATE TABLE celebs (
   id INTEGER, 
   name TEXT, 
   age INTEGER
);

/* Clausula INSERT INTO para ingresar registros en la tabla que se creó previamente*/
INSERT INTO celebs (id, name, age) VALUES (1, 'Justin Bieber', 22); 

INSERT INTO celebs (id, name, age) 
VALUES (2, 'Beyonce Knowles', 33); 

INSERT INTO celebs (id, name, age) 
VALUES (3, 'Jeremy Lin', 26); 

INSERT INTO celebs (id, name, age) 
VALUES (4, 'Taylor Swift', 26); 

/* Clausula SELECT para consultar los nombres de la tabla*/ 
SELECT name FROM celebs;

/* Clausula ALTER para modificar la tabla y adicionar una nueva columna de tipo TEXT*/
ALTER TABLE celebs 
ADD COLUMN twitter_handle TEXT; 

/* Clausula WHERE permite actualizar en la tabla un campo utilizando SET y WHERE para indicar el id del registro que debe actualizar*/
UPDATE celebs 
SET twitter_handle = '@taylorswift13' 
WHERE id = 4; 

/* Clausula DELETE para eliminar de la tabla aquellos registros que cumplen con la condición definida por WHERE. En este caso que el campo sea nulo.*/
DELETE FROM celebs 
WHERE twitter_handle IS NULL;


/* Constraints o restricciones: clave primaria, texto no nulo, texto por default si no se ingresa nada*/
CREATE TABLE awards (
   id INTEGER PRIMARY KEY,
   recipient TEXT NOT NULL,
   award_name TEXT DEFAULT 'Grammy'
);



/**********************************************************************************************************************************/

/* Clausula SELECT para seleccionar solo dos columnas de la tabla*/
SELECT name, genre FROM movies;

/* AS permite crear un alias cuando se realiza la consulta*/
SELECT name AS 'Nombre' FROM movies;

/*DISTINCT es para filtrar valores único al realizar la consulta. Evita traer valores repetidos*/
SELECT DISTINCT genre FROM movies;

/*WHERE para definir el criterio que queremos consultar. En esta caso son los registros que tienen un rating inferior a 5 */
SELECT * FROM movies WHERE imdb_rating < 5;

SELECT * FROM movies WHERE year > 2014;

/*LIKE permite establecer patrones para realizar búsquedas más especificas. El caracter _ significa que se busca 'Se cualquier caracter en'.*/
SELECT * FROM movies WHERE name LIKE 'Se_en';


/* El caracter % significa todos los caracteres. Permite buscar registros que comienzar por..., finalizan con..., tienen en la mitad..., */
SELECT * FROM movies WHERE name LIKE 'A%';
SELECT * FROM movies WHERE name LIKE '%man%';
SELECT * FROM movies WHERE name LIKE 'The %';

/*Selecciona los registro donde el imdb_rating no es nulo */
SELECT name FROM movies WHERE imdb_rating IS NOT NULL;

/*Selecciona los registro donde el imdb_rating es nulo */
SELECT name FROM movies WHERE imdb_rating IS NULL;

/* BETWEEN se utiliza para definir rangos en el filtro*/
SELECT * FROM movies WHERE year BETWEEN 1990 AND 1999;
SELECT * FROM movies WHERE name BETWEEN 'A' AND 'J';

/* Ojo, en este caso no incluye G*/
SELECT * FROM movies WHERE name BETWEEN 'D' AND 'G';

/* Varias condiciones en el filtro utilizando el operador AND */

SELECT * FROM movies WHERE year BETWEEN 1970 AND 1979 AND imdb_rating > 8;

/* Varias condiciones en el filtro utilizando el operador OR (una condición, la otra o ambas) */
SELECT * FROM movies WHERE year > 2014 OR genre = 'action';

/* ORDER BY permite ordenar por el año en este caso descendente. Si se requiere ascendente se utiliza ASC*/
SELECT * FROM movies WHERE imdb_rating > 8 ORDER BY year DESC;

/* Se selecciona nombre y año de la table, ordenado por nombre*/
SELECT name, year FROM movies ORDER BY name;

SELECT name, year, imdb_rating FROM movies ORDER BY imdb_rating DESC;

/* Con LIMIT se establece la cantidad de registros */
SELECT * FROM movies ORDER BY imdb_rating DESC LIMIT 3;

/* Se utiliza CASE para definir tres escenarios diferentes */

SELECT name,
 CASE
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END
FROM movies;

/* Se agrega un AS para nombrar la columna nueva que se crea con el comentario según el caso que se cumple*/

SELECT name,
 CASE
  WHEN genre="romance" THEN 'Chill'
  WHEN genre="comedy" THEN 'Chill'
  ELSE 'Intense'
 END AS "Mood"
FROM movies;

/*******************************************************************************************************************************/

SELECT year,number FROM babies WHERE gender="F" AND name="Lillian";

/* Find 20 distinct names that start with ‘S’.*/
SELECT DISTINCT name FROM babies WHERE name LIKE "S%" LIMIT 20;

/*What are the top 10 names in 1880?*/
SELECT name,gender,number FROM babies WHERE year=1880 ORDER BY number DESC LIMIT 10;

/* Return all the restaurants that are Japanese and $$.*/
SELECT * FROM nomnom WHERE cuisine="Japanese" AND price="$$";

/* Your roommate Bevers can’t remember the exact name of a restaurant he went to but he knows it contains the word ‘noodle’ in it.
Can you find it for him using a query?*/
 SELECT * FROM nomnom WHERE name LIKE "%noodle%";
 
 /*Find the restaurants that have empty health values.*/
 SELECT * FROM nomnom WHERE health IS NULL;
  
 /*Order the table by title (from A-Z).*/
  SELECT title,publisher FROM news ORDER BY title ASC;
  
 /*Which article names have the word 'bitcoin' in it?*/
 SELECT * FROM news WHERE title LIKE "%bitcoin%";
 
 /* What are the 20 business articles published most recently?*/
 SELECT * FROM news WHERE category='b' ORDER BY timestamp DESC LIMIT 20;
 
 
 /******************************************************************************************************************/
 
 /*Calculation -----> Aggregates*/
 
 /* Contar el número de filas en la base de datos*/
 SELECT COUNT (*) FROM fake_apps;
 
 /* Contar la cantidad de filas condicionado a que el precio sea cero*/
SELECT COUNT (*) FROM fake_apps WHERE price=0;

/* Suma los valores del campo que se encuentra entre parentesis*/
SELECT SUM(downloads) FROM fake_apps;

/* Cantidad mínima de descargas*/
SELECT MIN(downloads) FROM fake_apps;

/* El precio más alto de las apps que se encuentran en la tabla*/
SELECT MAX(price) FROM fake_apps;

/* Número promedio de descargas*/
SELECT AVG(downloads) FROM fake_apps;

/*Precio promedio*/
SELECT AVG(price) FROM fake_apps;

/*Returna la columna nombre y una columna con el precio redondeado con cero decimales*/
SELECT name, ROUND(price, 0) FROM fake_apps;

/*Redondear el precio promedio a dos decimales*/
SELECT ROUND(AVG(price),2) FROM fake_apps;

/*Permite agrupar utilizando la clausula GROUP BY. En este caso se realiza el conteo por cada tipo de precio*/
SELECT price, COUNT(*) FROM fake_apps GROUP BY price;

/* Parecido al anterior pero con un filtro establecido por la clausula WHERE*/
SELECT price, COUNT(*) FROM fake_apps WHERE downloads>20000 GROUP BY price;

/* Presenta para el campo categoría la suma de descargas agrupadas por categoría*/
SELECT category, SUM(downloads) FROM fake_apps GROUP BY category;

/* Se pueden realizar agrupaciones de subconjuntos dentro de conjuntos de variables. En este caso se saca el promedio de descargas de la categoría y luego el precio dentro de cada categoría*/
SELECT category, price, AVG(downloads) FROM fake_apps GROUP BY category, price;

/*Igual al anterior pero de acuerdo al número de la columna en el query*/
SELECT category, price, AVG(downloads) FROM fake_apps GROUP BY 1,2;

/*HAVING cumple una función similar a WHERE pero cuando el query tiene agrupaciones. En este caso el query muestra por tipo de precio, el promedio de descargas, el conteo de apps por cada tipo, pero filtrado para que el conteo sea mayor a 10*/
SELECT price, ROUND(AVG(downloads)), COUNT(*) FROM fake_apps GROUP BY price HAVING COUNT(price)>10;

/**************************************************************************************************************************/

/* Use COUNT() and a LIKE operator to determine the number of users that have an email ending in ‘.com’.*/

SELECT COUNT(email) FROM users WHERE email LIKE "%.COM";

/*What are the most popular first names on Codeflix?*/

SELECT first_name, COUNT(*) FROM users GROUP BY first_name ORDER BY 2 DESC;

/*The UX Research team wants to see a distribution of watch durations*/
SELECT ROUND(watch_duration_in_minutes,0) AS 'duration', COUNT(watch_duration_in_minutes) FROM watch_history GROUP BY 1 ORDER BY 1 ASC;

/*Find all the users that have successfully made a payment to Codeflix and find their total amount paid.*/
SELECT (user_id), SUM (amount) FROM payments WHERE status="paid" GROUP BY 1 ORDER BY 2 DESC;

/*Generate a table of user ids and total watch duration for users who watched more than 400 minutes of content.*/
SELECT (user_id),SUM(watch_duration_in_minutes) FROM watch_history GROUP BY 1 HAVING SUM(watch_duration_in_minutes)>400;

/*To the nearest minute, how many minutes of content were streamed on Codeflix?*/
SELECT ROUND(SUM(watch_duration_in_minutes),0) FROM watch_history;

/*Which days in this period did Codeflix collect the most money?*/
SELECT pay_date,SUM(amount) FROM payments WHERE status='paid' GROUP BY pay_date ORDER BY 2 DESC;

/*Of all the events in the watch_history table, what is the duration of the longest individual watch event? What is the duration of the shortest?*/
SELECT MAX (watch_duration_in_minutes),MIN(watch_duration_in_minutes) FROM watch_history;


 





