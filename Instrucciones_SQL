
/*Información de la tabla browse para los 10 primeros registros*/
SELECT * FROM browse LIMIT 10;

/*Consultar todos los registros de la tabla celebs*/
SELECT*FROM celebs;

/* Clausula CREATE para crear la tabla celebs con sus columnas y tipos de datos*/
CREATE TABLE celebs (
   id INTEGER, 
   name TEXT, 
   age INTEGER
);

/* Clausula INSERT INTO para ingresar registros en la tabla que se creó previamente*/
INSERT INTO celebs (id, name, age) VALUES (1, 'Justin Bieber', 22); 

INSERT INTO celebs (id, name, age) 
VALUES (2, 'Beyonce Knowles', 33); 

INSERT INTO celebs (id, name, age) 
VALUES (3, 'Jeremy Lin', 26); 

INSERT INTO celebs (id, name, age) 
VALUES (4, 'Taylor Swift', 26); 

/* Clausula SELECT para consultar los nombres de la tabla*/ 
SELECT name FROM celebs;

/* Clausula ALTER para modificar la tabla y adicionar una nueva columna de tipo TEXT*/
ALTER TABLE celebs 
ADD COLUMN twitter_handle TEXT; 

/* Clausula WHERE permite actualizar en la tabla un campo utilizando SET y WHERE para indicar el id del registro que debe actualizar*/
UPDATE celebs 
SET twitter_handle = '@taylorswift13' 
WHERE id = 4; 

/* Clausula DELETE para eliminar de la tabla aquellos registros que cumplen con la condición definida por WHERE. En este caso que el campo sea nulo.*/
DELETE FROM celebs 
WHERE twitter_handle IS NULL;


/* Constraints o restricciones: clave primaria, texto no nulo, texto por default si no se ingresa nada*/
CREATE TABLE awards (
   id INTEGER PRIMARY KEY,
   recipient TEXT NOT NULL,
   award_name TEXT DEFAULT 'Grammy'
);



/**********************************************************************************************************************************/

/* Clausula SELECT para seleccionar solo dos columnas de la tabla*/
SELECT name, genre FROM movies;

/* AS permite crear un alias cuando se realiza la consulta*/
SELECT name AS 'Nombre' FROM movies;

/*DISTINCT es para filtrar valores único al realizar la consulta. Evita traer valores repetidos*/
SELECT DISTINCT genre FROM movies;

/*WHERE para definir el criterio que queremos consultar. En esta caso son los registros que tienen un rating inferior a 5 */
SELECT * FROM movies WHERE imdb_rating < 5;

SELECT * FROM movies WHERE year > 2014;

/*LIKE permite establecer patrones para realizar búsquedas más especificas. El caracter _ significa que se busca 'Se cualquier caracter en'.*/
SELECT * FROM movies WHERE name LIKE 'Se_en';


/* El caracter % significa todos los caracteres. Permite buscar registros que comienzar por..., finalizan con..., tienen en la mitad..., */
SELECT * FROM movies WHERE name LIKE 'A%';
SELECT * FROM movies WHERE name LIKE '%man%';
SELECT * FROM movies WHERE name LIKE 'The %';

/*Selecciona los registro donde el imdb_rating no es nulo */
SELECT name FROM movies WHERE imdb_rating IS NOT NULL;

/*Selecciona los registro donde el imdb_rating es nulo */
SELECT name FROM movies WHERE imdb_rating IS NULL;

/* BETWEEN se utiliza para definir rangos en el filtro*/
SELECT * FROM movies WHERE year BETWEEN 1990 AND 1999;
SELECT * FROM movies WHERE name BETWEEN 'A' AND 'J';

/* Ojo, en este caso no incluye G*/
SELECT * FROM movies WHERE name BETWEEN 'D' AND 'G';

/* Varias condiciones en el filtro utilizando el operador AND */

SELECT * FROM movies WHERE year BETWEEN 1970 AND 1979 AND imdb_rating > 8;

/* Varias condiciones en el filtro utilizando el operador OR (una condición, la otra o ambas) */
SELECT * FROM movies WHERE year > 2014 OR genre = 'action';

/* ORDER BY permite ordenar por el año en este caso descendente. Si se requiere ascendente se utiliza ASC*/
SELECT * FROM movies WHERE imdb_rating > 8 ORDER BY year DESC;

/* Se selecciona nombre y año de la table, ordenado por nombre*/
SELECT name, year FROM movies ORDER BY name;

SELECT name, year, imdb_rating FROM movies ORDER BY imdb_rating DESC;

/* Con LIMIT se establece la cantidad de registros */
SELECT * FROM movies ORDER BY imdb_rating DESC LIMIT 3;

/* Se utiliza CASE para definir tres escenarios diferentes */

SELECT name,
 CASE
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END
FROM movies;

/* Se agrega un AS para nombrar la columna nueva que se crea con el comentario según el caso que se cumple*/

SELECT name,
 CASE
  WHEN genre="romance" THEN 'Chill'
  WHEN genre="comedy" THEN 'Chill'
  ELSE 'Intense'
 END AS "Mood"
FROM movies;

/*******************************************************************************************************************************/

SELECT year,number FROM babies WHERE gender="F" AND name="Lillian";

/* Find 20 distinct names that start with ‘S’.*/
SELECT DISTINCT name FROM babies WHERE name LIKE "S%" LIMIT 20;

/*What are the top 10 names in 1880?*/
SELECT name,gender,number FROM babies WHERE year=1880 ORDER BY number DESC LIMIT 10;

/* Return all the restaurants that are Japanese and $$.*/
SELECT * FROM nomnom WHERE cuisine="Japanese" AND price="$$";

/* Your roommate Bevers can’t remember the exact name of a restaurant he went to but he knows it contains the word ‘noodle’ in it.
Can you find it for him using a query?*/
 SELECT * FROM nomnom WHERE name LIKE "%noodle%";
 
 /*Find the restaurants that have empty health values.*/
 SELECT * FROM nomnom WHERE health IS NULL;
  
 /*Order the table by title (from A-Z).*/
  SELECT title,publisher FROM news ORDER BY title ASC;
  
 /*Which article names have the word 'bitcoin' in it?*/
 SELECT * FROM news WHERE title LIKE "%bitcoin%";
 
 /* What are the 20 business articles published most recently?*/
 SELECT * FROM news WHERE category='b' ORDER BY timestamp DESC LIMIT 20;
 
 
 /******************************************************************************************************************/
 
 /*Calculation -----> Aggregates*/
 
 /* Contar el número de filas en la base de datos*/
 SELECT COUNT (*) FROM fake_apps;
 
 /* Contar la cantidad de filas condicionado a que el precio sea cero*/
SELECT COUNT (*) FROM fake_apps WHERE price=0;

/* Suma los valores del campo que se encuentra entre parentesis*/
SELECT SUM(downloads) FROM fake_apps;

/* Cantidad mínima de descargas*/
SELECT MIN(downloads) FROM fake_apps;

/* El precio más alto de las apps que se encuentran en la tabla*/
SELECT MAX(price) FROM fake_apps;

/* Número promedio de descargas*/
SELECT AVG(downloads) FROM fake_apps;

/*Precio promedio*/
SELECT AVG(price) FROM fake_apps;

/*Returna la columna nombre y una columna con el precio redondeado con cero decimales*/
SELECT name, ROUND(price, 0) FROM fake_apps;

/*Redondear el precio promedio a dos decimales*/
SELECT ROUND(AVG(price),2) FROM fake_apps;

/*Permite agrupar utilizando la clausula GROUP BY. En este caso se realiza el conteo por cada tipo de precio*/
SELECT price, COUNT(*) FROM fake_apps GROUP BY price;

/* Parecido al anterior pero con un filtro establecido por la clausula WHERE*/
SELECT price, COUNT(*) FROM fake_apps WHERE downloads>20000 GROUP BY price;

/* Presenta para el campo categoría la suma de descargas agrupadas por categoría*/
SELECT category, SUM(downloads) FROM fake_apps GROUP BY category;

/* Se pueden realizar agrupaciones de subconjuntos dentro de conjuntos de variables. En este caso se saca el promedio de descargas de la categoría y luego el precio dentro de cada categoría*/
SELECT category, price, AVG(downloads) FROM fake_apps GROUP BY category, price;

/*Igual al anterior pero de acuerdo al número de la columna en el query*/
SELECT category, price, AVG(downloads) FROM fake_apps GROUP BY 1,2;

/*HAVING cumple una función similar a WHERE pero cuando el query tiene agrupaciones. En este caso el query muestra por tipo de precio, el promedio de descargas, el conteo de apps por cada tipo, pero filtrado para que el conteo sea mayor a 10*/
SELECT price, ROUND(AVG(downloads)), COUNT(*) FROM fake_apps GROUP BY price HAVING COUNT(price)>10;

/**************************************************************************************************************************/

/* Use COUNT() and a LIKE operator to determine the number of users that have an email ending in ‘.com’.*/

SELECT COUNT(email) FROM users WHERE email LIKE "%.COM";

/*What are the most popular first names on Codeflix?*/

SELECT first_name, COUNT(*) FROM users GROUP BY first_name ORDER BY 2 DESC;

/*The UX Research team wants to see a distribution of watch durations*/
SELECT ROUND(watch_duration_in_minutes,0) AS 'duration', COUNT(watch_duration_in_minutes) FROM watch_history GROUP BY 1 ORDER BY 1 ASC;

/*Find all the users that have successfully made a payment to Codeflix and find their total amount paid.*/
SELECT (user_id), SUM (amount) FROM payments WHERE status="paid" GROUP BY 1 ORDER BY 2 DESC;

/*Generate a table of user ids and total watch duration for users who watched more than 400 minutes of content.*/
SELECT (user_id),SUM(watch_duration_in_minutes) FROM watch_history GROUP BY 1 HAVING SUM(watch_duration_in_minutes)>400;

/*To the nearest minute, how many minutes of content were streamed on Codeflix?*/
SELECT ROUND(SUM(watch_duration_in_minutes),0) FROM watch_history;

/*Which days in this period did Codeflix collect the most money?*/
SELECT pay_date,SUM(amount) FROM payments WHERE status='paid' GROUP BY pay_date ORDER BY 2 DESC;

/*Of all the events in the watch_history table, what is the duration of the longest individual watch event? What is the duration of the shortest?*/
SELECT MAX (watch_duration_in_minutes),MIN(watch_duration_in_minutes) FROM watch_history;

/***************************************************************************************************/

SELECT * FROM startups;
SELECT COUNT (*) FROM startups;
SELECT SUM(valuation) FROM startups;
SELECT MAX(raised) FROM startups;
SELECT MAX(raised) FROM startups WHERE stage="Seed";

SELECT MIN(founded) FROM startups;

SELECT AVG(valuation) FROM startups;

SELECT category, AVG(valuation) FROM startups GROUP BY category;

SELECT category, ROUND(AVG(valuation),2) FROM startups GROUP BY category;

SELECT category, ROUND(AVG(valuation),2) as Average FROM startups GROUP BY category ORDER BY 2 DESC;

SELECT category, COUNT(name) FROM startups GROUP BY category;

SELECT category, COUNT(name) FROM startups GROUP BY category HAVING COUNT(name)>3;

SELECT location, AVG(employees) FROM startups GROUP BY location HAVING AVG(employees)<500;

/****************************************************************************************************/

SELECT title, score
FROM hacker_news
ORDER BY score DESC
LIMIT 5; 

SELECT SUM(score)
FROM hacker_news;

SELECT user, SUM(score)
FROM hacker_news
GROUP BY user
HAVING SUM(score) > 200
ORDER BY 2 DESC;

SELECT (517 + 309 + 304 + 282) / 6366.0;

SELECT user,
   COUNT(*)
FROM hacker_news
WHERE url LIKE '%watch?v=dQw4w9WgXcQ%'
GROUP BY user
ORDER BY COUNT(*) DESC;

SELECT CASE
   WHEN url LIKE '%github.com%' THEN 'GitHub'
   WHEN url LIKE '%medium.com%' THEN 'Medium'
   WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
   ELSE 'Other'
  END AS 'Source'
FROM hacker_news;

SELECT CASE
   WHEN url LIKE '%github.com%' THEN 'GitHub'
   WHEN url LIKE '%medium.com%' THEN 'Medium'
   WHEN url LIKE '%nytimes.com%' THEN 'New York Times'
   ELSE 'Other'
  END AS 'Source',
  COUNT(*)
FROM hacker_news
GROUP BY 1;

/*********************************************************************************************************************/

 SELECT * FROM met LIMIT 10;
 SELECT COUNT(*) FROM met;
 SELECT COUNT(*) FROM met WHERE category LIKE '%celery%';
 SELECT DISTINCT category FROM met WHERE category LIKE '%celery%';

SELECT MIN(date) FROM met;
SELECT DISTINCT title,medium FROM met WHERE date LIKE '%1600%';

SELECT country, COUNT(*) AS 'Count' FROM met GROUP BY country ORDER BY 2 DESC LIMIT 10; 

SELECT category, COUNT(*) FROM met GROUP BY 1 HAVING COUNT(*) > 100;

SELECT medium, COUNT(*) FROM met WHERE medium LIKE '%gold%' OR  medium LIKE '%silver%';

SELECT CASE
   WHEN medium LIKE '%gold%'   THEN 'Gold'
   WHEN medium LIKE '%silver%' THEN 'Silver'
   ELSE NULL
  END AS 'Bling',
  COUNT(*)
FROM met
WHERE Bling IS NOT NULL
GROUP BY 1
ORDER BY 2 DESC;

/**********************************************************************************************************************/

 SELECT * FROM transactions;
 SELECT SUM(money_in) FROM transactions;
  SELECT SUM(money_out) FROM transactions;

SELECT COUNT(money_in) FROM transactions;
SELECT COUNT(money_in) FROM transactions WHERE currency="BIT";

SELECT user_id, MAX(money_in) FROM transactions;
SELECT user_id, MAX(money_out) FROM transactions;

SELECT AVG(money_in) FROM transactions WHERE currency="ETH";

SELECT date, ROUND(AVG(money_in),2) AS 'Inflow', ROUND(AVG(money_out),2) AS 'Outflow' FROM transactions GROUP BY date;

/**************************Working with multiple tables**************************************************************/

SELECT * FROM orders LIMIT 5;

SELECT * FROM subscriptions LIMIT 5;

SELECT * FROM customers LIMIT 5;

/* Se seleccionan todos campos de la tabla orders unido con la tabla subscriptions a través del campo subscription_id que esta en ambas tablas*/

SELECT * FROM orders JOIN subscriptions ON orders.subscription_id=subscriptions.subscription_id;

/*La anterior con filtro*/
SELECT * FROM orders JOIN subscriptions ON orders.subscription_id=subscriptions.subscription_id WHERE description="Fashion Magazine";

/*	Query utilizando el id como unión para las dos tablas*/

SELECT COUNT(*) FROM newspaper;
SELECT COUNT(*) FROM online;

SELECT COUNT(*) FROM newspaper JOIN online ON newspaper.id=online.id;

/*LEFT JOIN: Cuando se utiliza left join se dejan todos los registros de la primera tabla (la tabla a la izquierda). Los registro de la otra tabla que cruzan se completan, los que no se cruzan se borran*/
SELECT * FROM newspaper LEFT JOIN online ON newspaper.id = online.id;

/* Se adiciona un filtro para los registros cuyo id en la tabla online es nulo*/
SELECT * FROM newspaper LEFT JOIN online ON newspaper.id = online.id WHERE online.id IS NULL;

/* Se cruzan las tabblas teniendo en cuenta que en la tabla clases la clave primaria es id, y esta misma variable esta en la tabla student como clave foranea denominada class_id.*/
SELECT * FROM students JOIN classes ON students.class_id=classes.id;

/**************************/
/*Se cuenta la cantidad de suscriptores que iniciaron antes del mes 3 y continuan después de este mes*/
SELECT COUNT(*) FROM newspaper WHERE start_month<=3 AND end_month>=3;

/*Se cruzan dos bases de datos sin unión a través de una variable específica*/
SELECT * FROM newspaper CROSS JOIN months;

SELECT * FROM newspaper CROSS JOIN months WHERE start_month<=month AND end_month>=month;

/***************************UNION: Permite unir registros de dos tablas cuando tienen los mismos campos. Es adicionar una sobre la otra*******************************/

/*Para usar UNION las tablas deben tener la misma cantidad de columnas, las columnas deben tener el mismo tipo de datos y deben tener el mismo orden que la primera tabla*********/
SELECT * FROM newspaper UNION SELECT * FROM online;

/*****WITH:permite juntar dos tablas, pero una de las tablas es el resultado de cálculos previos***/
WITH previous_query AS (
SELECT customer_id,
       COUNT(subscription_id) as subscriptions
FROM orders
GROUP BY customer_id)
SELECT customers.customer_name,
previous_query.subscriptions
FROM previous_query
JOIN customers
	ON customers.customer_id = previous_query.customer_id;

/*********************************************************************************************************************************************/


/*Se selecciona la variable user_id de la tabla premium y la variable description de la tabla plan. 
Lo anterior a partir de juntar las dos tablas premium y plans a partir de la variable id de plans y la variable membership_plan_id que 
son la misma*/
SELECT premium_users.user_id, plans.description FROM premium_users JOIN plans ON plans.id = premium_users.membership_plan_id;

/*Se selecciona la variable user_id de plays, la variable play_date de plays, y la variable titlede songs. Las dos tablas se unen por el id.*/

 SELECT plays.user_id,plays.play_date,songs.title FROM songs JOIN plays ON songs.id=plays.song_id;
 
 /*Se fusionan la users y premium_users usando el id. Como se realiza la fusión con LEFT JOIN quedan tanto registro que cruzan
 como los que no cruzan. Se utilizan un filtro WHERE para sacar los que no cruzan, porque se desea conocer que usuarios no son premium.*/
 
 SELECT id FROM users LEFT JOIN premium_users ON users.id = premium_users.user_id WHERE premium_users.user_id IS NULL;
 
 
 /* Con el WITH se generan unas tablas temporales llamadas january y february que seleccionan las canciones con filtro enero y febrero. 
 Luego con el select se uenn las dos tablas temprarles y se saca solo lo de enero.*/
 WITH january AS (
  SELECT *
  FROM plays
  WHERE strftime("%m", play_date) = '01'
),
february AS (
  SELECT *
  FROM plays
  WHERE strftime("%m", play_date) = '02'

)

 SELECT january.user_id FROM january LEFT JOIN february ON january.user_id = february.user_id WHERE february.user_id IS NULL;
 
 
 /* Se unen sin variable en comun dos bases de datos. Para eso se utiliza CROSS JOIN. Para cada usuario en la tabla premium_users
 se repiten los meses de la tabla month. Luego de tener unidas las tablas se seleccionan las variables correspondientes.*/
 
 SELECT premium_users.user_id,premium_users.purchase_date,premium_users.cancel_date,months.months FROM premium_users CROSS JOIN months;
 
 

/*Se unen las dos tablas, y se utiliza el CASE para escoger los usuarios activos y no activos*/
SELECT premium_users.user_id,
  months.months,
  CASE
    WHEN (
      premium_users.purchase_date <=
             months.months
      )
      AND
      (
        (premium_users.cancel_date >=
                months.months)
        OR
        premium_users.cancel_date IS NULL
      )
    THEN 'active'
    ELSE 'not_active'
  END as status

FROM premium_users
CROSS JOIN months;

/*Se forma una tabla de una columna y tres filas con las tres fechas*/
SELECT '2017-01-01' AS 'month'
UNION
SELECT '2017-02-01' AS 'month'
UNION
SELECT '2017-03-01'AS 'month';

/* WITH permite cruzar una consulta con una tabla completa*/

WITH play_count AS (SELECT song_id,
   COUNT(*) AS 'times_played'
FROM plays
GROUP BY song_id)
SELECT songs.title,
songs.artist,
play_count.times_played
FROM play_count
JOIN songs
	ON play_count.song_id= songs.id;
	
/* Se cruzan dos tablas teniendo como referencia o base la tabla de la izquierda. Lo que cruza se deja, lo otro se borra*/

SELECT trips.date, 
   trips.pickup, 
   trips.dropoff, 
   trips.type, 
   trips.cost,
   riders.first, 
   riders.last,
   riders.username
FROM trips
LEFT JOIN riders 
  ON trips.rider_id = riders.id;
  
/* Se realiza un filtro en la tabla riders y otro filtro en la tabla riders2. Luego se unen uno encima del otro, dado que tienen los mismos campos y tipos de variables*/
SELECT *
FROM riders
WHERE total_trips < 500
UNION
SELECT *
FROM riders2
WHERE total_trips < 500;

/******************************************************************************************************************/

 /* Selecciona las preguntas, cuenta la cantidad de id en cada pregunta y presenta una tabla ordenada con el conteo*/
 SELECT question_text, COUNT(DISTINCT user_id) FROM survey_responses GROUP BY 1;
 
 SELECT modal_text, COUNT (DISTINCT user_id) FROM onboarding_modals GROUP BY modal_text ORDER BY modal_text;
	
/* Selecciona los casos único de modal text cuando ab_group=control agrupado y ordenado por modal_text*/

SELECT modal_text, COUNT(DISTINCT CASE WHEN ab_group = 'control' THEN user_id END) AS 'control_clicks' FROM onboarding_modals GROUP BY 1 ORDER BY 1;


/* Se selecciona modal text, se realiza el conteo de los user id cuando ab group es control, y otra columna cuando ab_group es variant, agrupado y ordenado*/
SELECT modal_text,
  COUNT(DISTINCT CASE
    WHEN ab_group = 'control' THEN user_id
    END) AS 'control_clicks',
  COUNT(DISTINCT CASE
    WHEN ab_group = 'variant' THEN user_id
    END) AS 'variant_clicks'
FROM onboarding_modals
GROUP BY 1
ORDER BY 1;

/*Visualización de 5 registros en tres tablas*/

SELECT * FROM browse LIMIT 5;

SELECT * FROM checkout LIMIT 5;

SELECT * FROM purchase LIMIT 5;

/* Selección de los campos de tres tablas usando el user_id como clave para unirlas. Cómo es LEFT JOIN quedan todos los registros de la primera tabla*/

SELECT * FROM browse AS 'b' LEFT JOIN checkout AS 'c' ON c.user_id=b.user_id LEFT JOIN purchase AS 'p' ON p.user_id=c.user_id LIMIT 50;

/* Se seleccionan casos únicos con el DISTINCT de las variables browse date, user id, user id de c si no es nulo, user id de p si es no nulo
de la tabla browse que tiene un alias, y que realiza un left join a través del user id */

 SELECT DISTINCT b.browse_date,
   b.user_id,
   c.user_id IS NOT NULL AS 'is_checkout',
   p.user_id IS NOT NULL AS 'is_purchase'
FROM browse AS 'b'
LEFT JOIN checkout 'c'
  ON c.user_id = b.user_id
LEFT JOIN purchase 'p'
  ON p.user_id = c.user_id
LIMIT 50;

/* Se incluye todo el query anterior en un WITH para que se entienda como una tabla. Con el select count de afuera se calcula la cantidad de registros
que tiene esta consulta*/

WITH funnels AS (
  SELECT DISTINCT b.browse_date,
     b.user_id,
     c.user_id IS NOT NULL AS 'is_checkout',
     p.user_id IS NOT NULL AS 'is_purchase'
  FROM browse AS 'b'
  LEFT JOIN checkout AS 'c'
    ON c.user_id = b.user_id
  LEFT JOIN purchase AS 'p'
    ON p.user_id = c.user_id)
SELECT COUNT(*) AS 'num_browse'
FROM funnels;

/* El cambio respecto al anterior es que se adiciona un SUM para verificar la cantidad de registros 1 en el checkout y purchase. Adicionalmente,
se realiza dos divisiones para calcular proporciones*/

/* Tener en cuenta el 1.0 que se requiere para que la fracción se calcule correctamente*/

WITH funnels AS (
  SELECT DISTINCT b.browse_date,
     b.user_id,
     c.user_id IS NOT NULL AS 'is_checkout',
     p.user_id IS NOT NULL AS 'is_purchase'
  FROM browse AS 'b'
  LEFT JOIN checkout AS 'c'
    ON c.user_id = b.user_id
  LEFT JOIN purchase AS 'p'
    ON p.user_id = c.user_id)
SELECT COUNT(*) AS 'num_browse',
SUM(is_checkout) AS 'num_checkout',
SUM(is_purchase) AS 'num_purchase',
1.0 * SUM(is_checkout) / COUNT(user_id) AS 'browse_to_checkout',
1.0 * SUM(is_purchase) / SUM(is_checkout) AS 'checkout_to_purchase'
FROM funnels;



/* With esta una consulta que se asume como una tabla. La consulta cruza tres tablas con leftjoin y usando el user_id. Luego
de esa consulta with se saca las fechas browse date y para cada una se calculan unos indicadores que se agrupan y orden con el group by el order by*/

WITH funnels AS (
  SELECT DISTINCT b.browse_date,
     b.user_id,
     c.user_id IS NOT NULL AS 'is_checkout',
     p.user_id IS NOT NULL AS 'is_purchase'
  FROM browse AS 'b'
  LEFT JOIN checkout AS 'c'
    ON c.user_id = b.user_id
  LEFT JOIN purchase AS 'p'
    ON p.user_id = c.user_id)
SELECT browse_date,
   COUNT(*) AS 'num_browse',
   SUM(is_checkout) AS 'num_checkout',
   SUM(is_purchase) AS 'num_purchase',
   1.0 * SUM(is_checkout) / COUNT(user_id) AS 'browse_to_checkout',
   1.0 * SUM(is_purchase) / SUM(is_checkout) AS 'checkout_to_purchase'
FROM funnels
GROUP BY browse_date
ORDER BY browse_date;

/* Realizar un calculo sencillo en SQL. Énfasis en el punto después del 100 para permitir reflejar el punto flotante*/

SELECT 100./2000;


/*1.0 se utiliza para generar los números decimales del calculo. Se utilizan las clausulas WHERE AND BETWEEN para definir las fechas que se quieren
tener dentro del cálculo*/.

SELECT 1.0 * (SELECT COUNT(*) FROM subscriptions WHERE subscription_start < '2017-01-01' AND ( subscription_end BETWEEN '2017-01-01' AND '2017-01-31')
) / (SELECT COUNT(*) FROM subscriptions WHERE subscription_start < '2017-01-01' AND ((subscription_end >= '2017-01-01') OR (subscription_end IS NULL))) 
AS result;
 
 
 /* WITH separa una consulta de aquellos clientes que se suscriben antes del enero 1 de 2017 y se mantienen activos. 
 Con el select se hace un conteo de aquellos cuya suscripción es inferior al 31 de enero de 2017. Con el otro select se selecciona aquellos
 cuya suscripción es anterior al 01 de enero de 2017 y se mantienen luego del 31 de enero de 2017. */
 WITH enrollments AS 
(SELECT *
FROM subscriptions
WHERE subscription_start < '2017-01-01'
AND (
  (subscription_end >= '2017-01-01')
  OR (subscription_end IS NULL)
)),
status AS 
(SELECT 
CASE
  WHEN (subscription_end > '2017-01-31')
    OR (subscription_end IS NULL) THEN 0
  ELSE 1
  END as is_canceled,
CASE
  WHEN (subscription_start < '2017-01-01')
    AND (
      (subscription_end >= '2017-01-01')
        OR (subscription_end IS NULL)
    ) THEN 1
    ELSE 0
  END as is_active
FROM enrollments
)
SELECT 1.0 * SUM(is_canceled)/SUM(is_active) FROM status;


/* Creación de tablas temporales y cruces de tablas con cross_join */

 WITH months AS
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months),
status AS
(SELECT id, first_day as month,
CASE
  WHEN (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active
FROM cross_join)

SELECT *
FROM status
LIMIT 100;

/**********************************************************************************************************************************/

 SELECT * FROM subscriptions LIMIT 100;
 
 SELECT MIN(subscription_start),MAX(subscription_start) FROM subscriptions;
 
 /* se genera una tabla denominada months que tiene dos columnas, una con los primeros días de cada y otra con los últimos días de cada mes*/
 
 WITH months AS(
 SELECT
 '2017-01-01' AS first_day,
 '2017-01-31' AS last_day
 UNION
 SELECT
 '2017-02-01' AS first_day,
 '2017-02-28' AS last_day
 UNION
 SELECT
 '2017-03-01' AS first_day,
 '2017-03-31' AS last_day


) SELECT * FROM months;

/* Se cruza la tabla de months con toda la tabla de subscription. Cada registro se repite tres veces */

WITH months AS(
 SELECT
 '2017-01-01' AS first_day,
 '2017-01-31' AS last_day
 UNION
 SELECT
 '2017-02-01' AS first_day,
 '2017-02-28' AS last_day
 UNION
 SELECT
 '2017-03-01' AS first_day,
 '2017-03-31' AS last_day


),

cross_join AS(
  SELECT * FROM subscriptions
  CROSS JOIN months
) SELECT * FROM cross_join;


/**************************************/

WITH months AS(
 SELECT
 '2017-01-01' AS first_day,
 '2017-01-31' AS last_day
 UNION
 SELECT
 '2017-02-01' AS first_day,
 '2017-02-28' AS last_day
 UNION
 SELECT
 '2017-03-01' AS first_day,
 '2017-03-31' AS last_day


),

cross_join AS(
  SELECT * FROM subscriptions
  CROSS JOIN months
),

status AS(
  SELECT id,
  first_day AS month,

  CASE
    WHEN (subscription_start<first_day) AND (subscription_end>first_day OR subscription_end IS NULL) AND (segment=87) THEN 1
    ELSE 0
  END AS is_active_87,

CASE
    WHEN (subscription_start<first_day) AND (subscription_end>first_day OR subscription_end IS NULL) AND (segment=30) THEN 1
    ELSE 0
  END AS is_active_30
  FROM cross_join
) 

SELECT * FROM status LIMIT 9;


/****************************************************************/

WITH months AS(
 SELECT
 '2017-01-01' AS first_day,
 '2017-01-31' AS last_day
 UNION
 SELECT
 '2017-02-01' AS first_day,
 '2017-02-28' AS last_day
 UNION
 SELECT
 '2017-03-01' AS first_day,
 '2017-03-31' AS last_day


),

cross_join AS(
  SELECT * FROM subscriptions
  CROSS JOIN months
),

status AS(
  SELECT id,
  first_day AS month,

  CASE
    WHEN (subscription_start<first_day) AND (subscription_end>first_day OR subscription_end IS NULL) AND (segment=87) THEN 1
    ELSE 0
  END AS is_active_87,

CASE
    WHEN (subscription_start<first_day) AND (subscription_end>first_day OR subscription_end IS NULL) AND (segment=30) THEN 1
    ELSE 0
  END AS is_active_30,

CASE
  WHEN (subscription_end BETWEEN first_day AND last_day) AND (segment=87) THEN 1 ELSE 0
END is_canceled_87,

CASE
  WHEN (subscription_end BETWEEN first_day AND last_day) AND (segment=30) THEN 1 ELSE 0
END is_canceled_30

  FROM cross_join
) 

SELECT * FROM status LIMIT 9;


/***********************************************************************************************/

WITH months AS(
 SELECT
 '2017-01-01' AS first_day,
 '2017-01-31' AS last_day
 UNION
 SELECT
 '2017-02-01' AS first_day,
 '2017-02-28' AS last_day
 UNION
 SELECT
 '2017-03-01' AS first_day,
 '2017-03-31' AS last_day


),

cross_join AS(
  SELECT * FROM subscriptions
  CROSS JOIN months
),

status AS(
  SELECT id,
  first_day AS month,

  CASE
    WHEN (subscription_start<first_day) AND (subscription_end>first_day OR subscription_end IS NULL) AND (segment=87) THEN 1
    ELSE 0
  END AS is_active_87,

CASE
    WHEN (subscription_start<first_day) AND (subscription_end>first_day OR subscription_end IS NULL) AND (segment=30) THEN 1
    ELSE 0
  END AS is_active_30,

CASE
  WHEN (subscription_end BETWEEN first_day AND last_day) AND (segment=87) THEN 1 ELSE 0
END is_canceled_87,

CASE
  WHEN (subscription_end BETWEEN first_day AND last_day) AND (segment=30) THEN 1 ELSE 0
END is_canceled_30

  FROM cross_join
),
status_aggregate AS (
  SELECT month, SUM(is_active_87) AS sum_active_87,
  SUM (is_active_30) AS sum_active_30,
  SUM (is_canceled_87) AS sum_canceled_87,
  SUM (is_canceled_30) AS sum_canceled_30
  FROM status
  GROUP BY month
)

SELECT * FROM status_aggregate;


/***************************************************************************************************/

WITH months AS(
 SELECT
 '2017-01-01' AS first_day,
 '2017-01-31' AS last_day
 UNION
 SELECT
 '2017-02-01' AS first_day,
 '2017-02-28' AS last_day
 UNION
 SELECT
 '2017-03-01' AS first_day,
 '2017-03-31' AS last_day


),

cross_join AS(
  SELECT * FROM subscriptions
  CROSS JOIN months
),

status AS(
  SELECT id,
  first_day AS month,

  CASE
    WHEN (subscription_start<first_day) AND (subscription_end>first_day OR subscription_end IS NULL) AND (segment=87) THEN 1
    ELSE 0
  END AS is_active_87,

CASE
    WHEN (subscription_start<first_day) AND (subscription_end>first_day OR subscription_end IS NULL) AND (segment=30) THEN 1
    ELSE 0
  END AS is_active_30,

CASE
  WHEN (subscription_end BETWEEN first_day AND last_day) AND (segment=87) THEN 1 ELSE 0
END is_canceled_87,

CASE
  WHEN (subscription_end BETWEEN first_day AND last_day) AND (segment=30) THEN 1 ELSE 0
END is_canceled_30

  FROM cross_join
),
status_aggregate AS (
  SELECT month, SUM(is_active_87) AS sum_active_87,
  SUM (is_active_30) AS sum_active_30,
  SUM (is_canceled_87) AS sum_canceled_87,
  SUM (is_canceled_30) AS sum_canceled_30
  FROM status
  GROUP BY month
)

SELECT month,
1.0*sum_canceled_87/sum_active_87 AS churn_rate_87,
1.0*sum_canceled_30/sum_active_30 AS churn_rate_30
FROM status_aggregate;


/************************************************************************************************/


WITH last_touch AS (

 SELECT user_id,
   MAX(timestamp) AS 'last_touch_at'
FROM page_visits  WHERE user_id=10069
GROUP BY user_id)

SELECT lt.user_id,
       lt.last_touch_at,
       pv.utm_source
 FROM last_touch AS 'lt'
 JOIN page_visits AS 'pv'
    ON lt.user_id=pv.user_id
    AND lt.last_touch_at=pv.timestamp;
	





















 
 










